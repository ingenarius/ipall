#!/usr/bin/python2.4

"""
*****************************
IP@LL IP addressmanagement
Copyright 2007 racyAPz
http://www.racyapz.at
*****************************
"""

import Html as HTML
import DBmy
from Sessionclass import Session
import Tree1 as Tree
import IpallUser
import os
import cgitb; cgitb.enable()
from Configobj import ConfigObj
from Cookie import SimpleCookie

def tree_nodes(networks, rights):
    """recursive function for displaying networks and subnets
    networks	...	tuple of networks to display"""

    ### definitions of variables
    depth = len(path.split(":"))
    p = int(path.split(":")[depth-1])
    childs = ()

    for n in networks:
        id_found = 0
        ### permissions of the network(s)
        if group == 1 or rights[2] == 1:
            net_perm = ([1,1,1,1],)
        else:
            sql_perm = """SELECT delete_net, edit_net, subnet_net, view_net FROM ipall_rights 
                WHERE LOCATE(path, '%s') > 0 AND group_id=%u ORDER BY path DESC LIMIT 1""" % (n[6], group)
            net_perm = conn.get_data(sql_perm)

        if net_perm == ():
            net_perm = [0,0,0,0]
        else:
            net_perm = net_perm[0]

        net = Tree.Node(rights, net_perm, len(n[6].split(":")), n[6], vrf, path)
        for i in path.split(":"):
            if int(i) == n[0]:
                id_found = 1

        ### print every second line with background color
        if net_perm[3] != 1:
            continue
        else:
            print """<tr><td align=center>"""

        print """<table class="table_networks1"><tr height=20>"""

        ### build tree of networks with plus and minus symbols

        if net_perm[3] == 1:
            ### the network has subnets and is not selected
            if int(n[7]) == 1 and id_found == 0 and n[0] != p:
                net.print_plus(n[7], n[0])
                net.print_node(n)
                net.print_actions(n[0], n[14])

            ### subnet of network is selected
            elif int(n[7]) == 1 and id_found == 1 and n[0] != p:
                net.print_minus(n[7], n[0])
                net.print_node(n, 1)
                net.print_actions(n[0], n[14])

            ### the network is selected 
            elif int(n[7]) == 1 and n[0] == p:
                net.print_minus(n[7], n[0])
                net.print_node(n, 1, 1)
                net.print_actions(n[0], n[14], 1)

            ### the network has no subnets
            else:
                net.print_empty()
                net.print_node(n)
                net.print_actions(n[0], n[14])
        print """</tr></table>"""


        for r in range(0, (depth)):
            q = int(path.split(":")[r])
            if int(n[7]) == 1 and n[0] == q:
                child_query = """SELECT * FROM ipall_ip WHERE parent_id=%u AND vrf='%s' ORDER BY address""" % (int(q), str(vrf))
                childs = conn.get_data(child_query)
                tree_nodes(childs, rights)
            print """</td></tr>"""


def main():
    """entry point for executing IPALL - networks"""

    ### definitions of variables
    global current_user, group, rights, conn, depth, path, vrf
    nodes = ()

    if os.environ.has_key('QUERY_STRING') and os.environ['QUERY_STRING'] != "":
        qs = os.environ['QUERY_STRING']
        if len(qs.split("&")) == 1:
            vrf = str(qs.split("&")[0])
            path = "0"
        elif len(qs.split("&")) == 2:
            vrf = str(qs.split("&")[0])
            path = str(qs.split("&")[1])
        else:
            vrf = "None"
            path = "0"  
    else:
        vrf = "None"
        path = "0"

    ### create database connection object
    cfg = ConfigObj("ipall.cfg")
    db_host = cfg['Database']['db_host']
    db_user = cfg['Database']['db_user']
    db_pw = cfg['Database']['db_pw']
    db = cfg['Database']['db']
    conn = DBmy.db(db_host, db_user, db_pw, db)

    ### User
    s = Session(conn)
    current_user = s.check_user()
    #company = s.check_cookie()
    HTML.simple_header()

    if current_user == "":
        HTML.simple_redirect_header(cfg['Server']['web_dir'])
        return
    else:
        HTML.body()
    user = IpallUser.User(current_user)
    group, company_id  = user.get_group_id()
    rights = user.get_rights(vrf)
    cgi_dir = cfg['Server']['cgi_dir']
    if group == 0:
        HTML.restriction_message()
        return

    sql_vrf_name = """SELECT vpn_vrf_name FROM networks WHERE vpn_rd='%s' """ % vrf
    vrf_name = conn.get_data(sql_vrf_name)
    if vrf_name != ():
        vrf_name = vrf_name[0]
    else:
        vrf_name = ""

    print """<br>"""
    print """<table class="table_main">"""
    print """<tr class=lightPurple3>"""
    print """<td align=left class=TextPurpleBold>networks of <i>'%s'</i></td>""" % ( vrf_name )
    print """<td align=right class=TextPurple>you are logged in as: <i>%s</i></td>""" % ( current_user )
    print """</tr>"""
    print """<tr class=lightPurple3 height=20>"""
    print """<td colspan=2 align=right>"""
    if rights[1] == 1:
        print """<a href="javascript:void(0);" onClick="popup('%s/nettype_permissions.cgi?%s');" 
            class=linkPurpleBold>type permission</a>&nbsp; |&nbsp;""" % ( cgi_dir, str(vrf) )
    if group == 1 or rights[0] == 1 or rights[2] == 1:
        print """<a href="javascript:void(0);" onClick="popup('%s/new_network.cgi?%s');" 
            class="LinkPurpleBold">new network</a>&nbsp; |&nbsp;""" % (cgi_dir, str(vrf))
    if rights[0] == 0 and rights[1] == 0:
        print """&nbsp;"""
    print """<a href="javascript:void(0);" onClick="popup('%s/search.cgi?%s');" 
            class=linkPurpleBold>search</a>""" % ( cgi_dir, str(vrf) )
    print """</td>""" 
    print """</tr>"""
    print """<tr><td colspan=2>"""

    if vrf != "None":
        roots_query = """SELECT * FROM ipall_ip WHERE parent_id=0 and vrf='%s' ORDER BY address""" % vrf
        nodes = conn.get_data(roots_query)
 
    if nodes == () or nodes == None:
        print """<blockquote>"""
        print """<p class=TextPurpleBold>No networks found!</p>"""
        print """<a href="javascript:history.back();" class=linkPurpleBold> << back</a>"""
        print """</blockquote>"""
    else:
        print """<br><table class=table_main>"""

        tree_nodes(nodes, rights)

        print """</table>"""

    print """</td></tr></table>"""
    HTML.main_footer()

main()
